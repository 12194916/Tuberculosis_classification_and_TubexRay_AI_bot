# -*- coding: utf-8 -*-
"""TubexRay_AI_bot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aJBbRgA6WxdeCBY5P9dKQAPf20M3Cz5I
"""

import telebot
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import tensorflow
from telebot import types

model = load_model('my_model.h5')

# Initialize the Telegram bot
bot = telebot.TeleBot('....')

# Define language constants
UZBEK = 'uz'
ENGLISH = 'en'
RUSSIAN = 'ru'

uz_welcome='''- Assalomu alaykum, Men dasturchi Muhammadyusuf tomonidan tarbiyalangan sun'iy intellektman. 

- Bemorning o'pka rengin rasmiga qarab, bemorda sil kasalligi bor yo'q ekanligini anqlab beraman.
  
- Mening anqliligim juda yuqori. Men tarbiyalangan rasmlar,  malakalik shifokorlar tomonidan ko'rib chiqilgan va tasdiqlangan.

- Muhim: Men test rejimida ishlamoqdaman, iltimos, menga ishonib hulosa qilmang, malakalik shifokorga murojat qiling.

Boshlash uchun, iltimos bemor o'pkasining rengin rasmini yuboring. '''

en_welcome='''- Hello, I am a trained artificial intelligence by developer Muhammadyusuf

- Looking at the picture of the patient's lungs, I can determine whether the patient has tuberculosis or not.
  
- I have really high accuracy. I was trained with pictures, carefully reviewed and approved by professional doctors.

- Important: I am working in test mode, please do not have a conclusion based on my responce, consult a qualified doctor.

To begin, please send the XRay image of the patient's lungs. '''

rus_welcome='''- Здравствуйте, я обученный искусственный интеллект от разработчика Мухаммадюсуфа.

- Глядя на снимок легких больного, я могу определить, есть ли у больного туберкулез или нет.
  
- У меня действительно высокая точность. Меня обучали фотографиям, тщательно просмотренным и одобренным профессиональными врачами.

- Важно: я работаю в тестовом режиме, пожалуйста, не делайте вывод по моему ответу, обратитесь к квалифицированному врачу. 

Для начала отправьте рентгеновский снимок легких пациента.'''


# Define welcome messages
WELCOME_MESSAGES = {
    UZBEK: uz_welcome,
    ENGLISH: en_welcome,
    RUSSIAN: rus_welcome,
}


user_data = {}

# Handler function for the language selection buttons
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # Create the keyboard markup with the language selection buttons
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(
        types.KeyboardButton(text='🇺🇿 O\'zbek'),
        types.KeyboardButton(text='🇬🇧 English'),
        types.KeyboardButton(text='🇷🇺 Русский')
    )
    
    # Send the welcome message with the language selection buttons
    msg = bot.send_message(message.chat.id, 'Tilni tanlang / Please select your language / Выберите язык', reply_markup=markup)
    
    # Store the selected language in the user data for future use
    bot.register_next_step_handler(msg, process_language_selection)

# Handler function for processing the language selection
def process_language_selection(message):
    try:
        # Get the selected language from the button text
        flag_emoji, language_name = message.text.split()
        selected_language = {
            '🇺🇿': UZBEK,
            '🇬🇧': ENGLISH,
            '🇷🇺': RUSSIAN
        }[flag_emoji]

        # Store the selected language in the user data for future use
        user_data[message.chat.id] = {'language': selected_language}

        # Send the welcome message in the selected language
        welcome_message = WELCOME_MESSAGES[selected_language]
        markup = types.ReplyKeyboardRemove(selective=False)
        bot.send_message(message.chat.id, welcome_message, reply_markup=markup)
    except:
        # If an error occurs, ask the user to select a language
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add(
            types.KeyboardButton(text='🇺🇿 O\'zbek'),
            types.KeyboardButton(text='🇬🇧 English'),
            types.KeyboardButton(text='🇷🇺 Русский')
        )
        msg = bot.send_message(message.chat.id, 'Tilni tanlang / Please select your language / Выберите язык', reply_markup=markup)
        bot.register_next_step_handler(msg, process_language_selection)



# Define the function for processing the image
@bot.message_handler(content_types=['photo'])
def process_image(message):
    # Download the image and save it locally
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    with open('image.jpg', 'wb') as new_file:
        new_file.write(downloaded_file)

    # Load the image and convert it to RGB color mode
    img = load_img('image.jpg', target_size=(28, 28))
    img = img.convert('RGB')

    bot.send_chat_action(message.chat.id, 'typing')

    # Preprocess the image for the model
    img = img_to_array(img)
    img = np.expand_dims(img, axis=0)
    img = img / 255.0

    CLASS_NAMES = {
    UZBEK: {
        'healthy': "Sog'lom",
        'sick': 'Bemorda sil kasalligi mavjud',
    },
    ENGLISH: {
        'healthy': "Healthy",
        'sick': 'The patient has tuberculosis',
    },
    RUSSIAN: {
        'healthy': "Здоровый",
        'sick': 'У больного туберкулёз',
    },
    }

    # Use the model to make a prediction
    prediction = model.predict(img)
    bot.send_chat_action(message.chat.id, 'typing')
    
    selected_language = user_data[message.chat.id]['language']

    # Map the class names to the selected language
    class_names = CLASS_NAMES[selected_language]

    # Get the predicted class index and corresponding class name
    if np.argmax(prediction) > 0.5:
        class_name = class_names['sick']
    else:
        class_name = class_names['healthy']

    # Send the prediction to the user
    bot.reply_to(message, class_name)



# Start the bot
bot.polling()
